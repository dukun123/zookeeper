################################################ 默认基本配置 ###############################################
# 基本事件单元，这个时间是作为Zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，每隔tickTime时间就会发送一个心跳；
# 最小 的session过期时间为2倍tickTime
tickTime=2000
# 集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多tick（每次tick的单位为tickTime）。
（或者允许follower连接并同步到Leader的最大初始化连接时间，当初始化连接时间超过该值，则表示连接失败。）在这里是20S
initLimit=10
# 集群中flower服务器（F）跟leader（L）服务器之间的请求和答应最多能容忍的tick（每次tick的单位为tickTime）
# (或者表示Leader与Follower之间发送消息时，请求和应答时间长度。如果follower在设置时间内不能与leader通信，那么此follower将会被丢弃)
syncLimit=5


#配置zookeeper快照日志和事务日志的存储地址,id文件也保存在该目录下,事务日志个快找日志都会存到version-2文件夹下面
dataDir=/tmp/zookeeper


# 其实在实际应用中，还可以为事务日志专门配置存储地址，配置项名称为dataLogDir，在zoo_sample.cfg中并未体现出来。
在没有dataLogDir配置项的时候，zookeeper默认将事务日志文件和快照日志文件都存储在dataDir对应的目录下。建议将事务日志（dataLogDir）
与快照日志（dataLog）单独配置，因为当zookeeper集群进行频繁的数据读写操作是，
会产生大量的事务日志信息，将两类日志分开存储会提高系统性能，而且，可以允许将两类日志存在在不同的存储介质上，减少磁盘压力

事务日志指zookeeper系统在正常运行过程中，针对所有的更新操作，在返回客户端“更新成功”的响应前，
zookeeper会保证已经将本次更新操作的事务日志已经写到磁盘上，只有这样，整个更新操作才会生效。

zookeeper的数据在内存中是以树形结构进行存储的，而快照就是每隔一段时间就会把整个DataTree的数据序列化后存储在磁盘中，这就是zookeeper的快照文件。

dataLogDir=/tmp/zookeeperLog

# 客户端连接的接口，客户端连接zookeeper服务器的端口，zookeeper会监听这个端口，接收客户端的请求访问！这个端口默认是2181。
clientPort=2181

# 这个操作将限制连接到Zookeeper的客户端数量，并限制并发连接的数量，
# 通过IP来区分不同的客户端。此配置选项可以阻止某些类别的Dos攻击。将他设置为零或忽略不进行设置将会取消对并发连接的限制。
maxClientCnxns=60

#用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能
traceFile=/data/requestlog

################################################# 存储配置 ###################################################
#附:以下参数不仅适用于单机模式,也适用于集群模式,这些参数不设置并不会影响zookeeper的功能,但建议最好配置
#preAllocSize 用于设置预分配的事务日志文件大小值,单位 KB,默认值是 64 MB
preAllocSize=64

# 指定每次快照之间的事务数(zookeeper.snapCount). 当zookeeper服务器重启之后需要恢复其状态,恢复时两大时间因素
# 分别为"恢复状态而读取快照的时间"和"快照启动后所发生的事务的执行时间"
（每进行snapCount次事务日志输出后，触发一次快照(snapshot),此时，ZK会生成一个snapshot.*文件，同时创建一个新的事务日志文件log.*）
snapCount=100000
# 当进行数据清理操作时,需要保留在快照数量和对应的事务日志文件数量(默认最小值是3,也是最大值)
autopurge.snapRetainCount=3
# 对快照和日志进行垃圾回收(清理)操作的时间间隔的小时数. 如果设置为非0,则指定了垃圾回收周期的时间间隔;如果设置
# 为0,默认情况下,垃圾回收不会自动执行,而需要通过ZooKeeper发行包中的脚本手动运行
autopurge.purgeInterval= 1
# 该选项常常以一组参数进行配置, 该选项指定组成一个仲裁机构的某个服务器的权重为n,其权重n值指示了该服务器在进行
# 投票时的权重值. 默认情况下,一个服务器的权重值为1,如果定义的一组服务器没有指定权重,所有的权重值将默认分配为1
weight.x=n

################################################# 网络配置 ####################################################
# 附:这些配置参数可以限制服务器和客户端之间的通信
# ZooKeeper服务器端中待处理请求的最大值,默认为1000
#最大请求堆积数。默认是1000。ZK运行的时候， 尽管server已经没有空闲来处理更多的客户端请求了，
但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。
globalOutstandingLimit=1000
# 限制客户端连接到指定的接收信息的地址上.默认情况下,一个ZooKeeper服务器会监听在所有网络接口地址上等待客户端
# 的连接。如果不希望服务器在公网接口接收客户端的连接,只需设置clientPortAddress选项为内网接口地址
clientPortAddress=127.0.0.1
# 最小会话超时时间,单位为毫秒。当客户端建立一个连接后就会请求一个明确的超时值,而客户端实际获得的超时值不会
# 低于minSessionTimeout. (minSessionTimeout默认值:2 * tickTime. 配置该参数过低可能会导致错误的客户端故障检
# 测,配置过高会延迟客户端故障的检查时间)
minSessionTimeout=4000
# 会话的最大超时时间值,单位:毫秒ms. 当客户端建立一个连接后就会请求一个明确的超时值.该参数并不会影响系统的
# 性能,但却可以限制一个客户端消耗系统资源的时间.(默认值: 20 * tickTime)
maxSessionTimeout=40000
################################################# 集群配置 #####################################################
# 附:在ZooKeeper集群中,这些参数的配置必须一致.
# 配置为"yes"或 "no"标志时,指示群首服务器是否为客户端提供服务(zookeeper.leaderServes).默认"yes"
默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，
那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能
leaderServes=yes

#server.A=B：C：D
A：其中 A 是一个数字，表示这个是服务器的编号；
B：是这个服务器的 ip 地址；
C：Leader选举的端口；
D：Zookeeper服务器之间的通信端口。
server.x=[hostname]:n:n[: observer]
# Leader选举过程中，打开一次连接的超时时间，默认是5s。(Java system property: zookeeper.  cnxTimeout )
cnxTimeout=5
# 选举算法的配置选项. 该选项用于选择不同的群首选举算法,但除了默认的配置外,其他的算法都已经弃用了.所以并不需
# 要配置该选项
#electionAlg=
#################################################################################################################
